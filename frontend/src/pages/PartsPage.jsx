import React, { useState, useEffect, useContext } from 'react';
import { Card, Row, Col, Form, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';
import axios from '../api/axios';
import './PartsPage.css';
import PartImage from '../components/PartImage';
import renderStars from '../utils/renderStars';

const PartsPage = () => {
  const navigate = useNavigate();

  const { user } = useContext(AuthContext);

  const brandModels = {
    BMW: ["X5", "M5", "X3", "320i"],
    Audi: ["A4", "Q7"],
    Mercedes: ["C-Class"],
    Ford: ["Focus"],
    Toyota: ["Camry"],
    Mazda: ["Mx-5"],
  };

  const [selectedBrand, setSelectedBrand] = useState('');
  const [selectedModel, setSelectedModel] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [sortBy, setSortBy] = useState('price_asc');

  const [parts, setParts] = useState([]);
  const [loading, setLoading] = useState(false);

  const [currentPage, setCurrentPage] = useState(1);
  const partsPerPage = 15;

  const { addToHistory } = useContext(AuthContext);

  // üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    const fetchParts = async () => {
      setLoading(true);
      try {
        const res = await axios.get('/parts', {
          params: {
            brand: selectedBrand,
            model: selectedModel,
            category: selectedCategory
          }
        });
        setParts(res.data);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchParts();
    setCurrentPage(1); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
  }, [selectedBrand, selectedModel, selectedCategory]);

  const rarityOrder = { legendary: 3, rare: 2, common: 1 };

  // üîç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const filteredParts = [...parts].sort((a, b) => {
  switch (sortBy) {
    case 'price_asc':
      return (a.price || 0) - (b.price || 0);
    case 'price_desc':
      return (b.price || 0) - (a.price || 0);
    case 'rating_desc':
      return (b.rating || 0) - (a.rating || 0);
    case 'rating_asc':
      return (a.rating || 0) - (b.rating || 0);
    case 'rarity_desc':
      return (rarityOrder[b.rarity] || 0) - (rarityOrder[a.rarity] || 0);
    case 'rarity_asc':
      return (rarityOrder[a.rarity] || 0) - (rarityOrder[b.rarity] || 0);
    case 'newest':
      return new Date(b.createdAt) - new Date(a.createdAt);
    case 'oldest':
      return new Date(a.createdAt) - new Date(b.createdAt);
    default:
      return 0;
  }
});

  // üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const totalParts = filteredParts.length;
  const totalPages = Math.ceil(totalParts / partsPerPage);
  const indexOfLastPart = currentPage * partsPerPage;
  const indexOfFirstPart = indexOfLastPart - partsPerPage;
  const currentParts = filteredParts.slice(indexOfFirstPart, indexOfLastPart);

  const handleNavigateToPartDetail = (part) => {
    addToHistory({
      id: part.id,
      title: part.title,
      price: part.price,
      media: part.media?.[0],
      viewedAt: new Date().toISOString()
    });
    navigate(`/part/${part.id}`);
  };


  return (
    <div className="mb-5 parts-page">
      {user?.role === 'admin' && (
        <div className="mb-3 text-end">
          <Button
          variant="success"
          onClick={() => navigate('/parts/create')}
          >
            + –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å
          </Button>
        </div>
      )}
      <h2 className="mb-3">–ü–æ–¥–±–æ—Ä –¥–µ—Ç–∞–ª–µ–π</h2>

      {/* üîß –§–∏–ª—å—Ç—Ä—ã */}
      <Form className="mb-4">
        <Row>
          <Col md={3}>
            <Form.Select value={selectedBrand} onChange={e => setSelectedBrand(e.target.value)}>
              <option value="">–í—Å–µ –º–∞—Ä–∫–∏</option>
              {Object.keys(brandModels).map(brand => (
                <option key={brand} value={brand}>{brand}</option>
              ))}
            </Form.Select>
          </Col>
          <Col md={3}>
            <Form.Select value={selectedModel} onChange={e => setSelectedModel(e.target.value)} disabled={!selectedBrand}>
              <option value="">–í—Å–µ –º–æ–¥–µ–ª–∏</option>
              {selectedBrand && brandModels[selectedBrand].map(model => (
                <option key={model} value={model}>{model}</option>
              ))}
            </Form.Select>
          </Col>
          <Col md={3}>
            <Form.Select value={selectedCategory} onChange={e => setSelectedCategory(e.target.value)}>
              <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              <option value="–î–≤–∏–≥–∞—Ç–µ–ª—å">–î–≤–∏–≥–∞—Ç–µ–ª—å</option>
              <option value="–ü–æ–¥–≤–µ—Å–∫–∞">–ü–æ–¥–≤–µ—Å–∫–∞</option>
              <option value="–¢–æ—Ä–º–æ–∑–∞">–¢–æ—Ä–º–æ–∑–∞</option>
              <option value="–ê—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞">–ê—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞</option>
              <option value="–í—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞">–í—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</option>
              <option value="–û–ø—Ç–∏–∫–∞">–û–ø—Ç–∏–∫–∞</option>
            </Form.Select>
          </Col>
          <Col md={3}>
            <Form.Select value={sortBy} onChange={e => setSortBy(e.target.value)}>
              <option value="price_asc">–°–Ω–∞—á–∞–ª–∞ –¥–µ—à—ë–≤—ã–µ</option>
              <option value="price_desc">–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ</option>
              <option value="rating_desc">–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ</option>
              <option value="rating_asc">–°–Ω–∞—á–∞–ª–∞ –Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ</option>
              <option value="rarity_desc">–°–Ω–∞—á–∞–ª–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ</option>
              <option value="rarity_asc">–°–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–µ</option>
              <option value="newest">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
              <option value="oldest">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
            </Form.Select>
          </Col>
        </Row>
      </Form>

      {/* üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {loading ? (
        <p className="text-center mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π...</p>
      ) : currentParts.length > 0 ? (
        <Row xs={1} md={2} lg={3} className="g-4">
          {currentParts.map(part => (
            <Col key={part.id}>
              <Card onClick={() => handleNavigateToPartDetail(part)} style={{ cursor: 'pointer' }}>
                <PartImage src={`http://localhost:5000${part.media?.[0]}`} alt={part.title} />
                <Card.Body>
                  <Card.Title>{part.title}</Card.Title>
                  <div className="mb-1 d-flex align-items-center gap-2">
                    <span className="fw-bold">{part.price} ‚ÇΩ</span>
                    <span className="badge bg-warning text-dark" style={{ fontSize: 12 }}>
                      {part.rarity === 'legendary'
                        ? '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'
                        : part.rarity === 'rare'
                        ? '–†–µ–¥–∫–∞—è'
                        : '–û–±—ã—á–Ω–∞—è'}
                    </span>
                  </div>
                  <div className="mb-1" style={{ fontSize: 16 }}>
                    <span title="–†–µ–π—Ç–∏–Ω–≥">{renderStars?.(part.rating || 0)}</span>
                    <span className="text-muted ms-1" style={{ fontSize: 13 }}>
                      ({(part.rating || 0).toFixed(1)})
                    </span>
                  </div>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      ) : (
        <p className="text-center mt-4">–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.</p>
      )}

      {/* üìë –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      {totalPages > 1 && (
        <div className="pagination">
          <button onClick={() => setCurrentPage(currentPage - 1)} disabled={currentPage === 1}>
            –ù–∞–∑–∞–¥
          </button>
          {[...Array(totalPages)].map((_, idx) => {
            const pageNum = idx + 1;
            return (
              <button
                key={pageNum}
                className={pageNum === currentPage ? 'active' : ''}
                onClick={() => setCurrentPage(pageNum)}
              >
                {pageNum}
              </button>
            );
          })}
          <button onClick={() => setCurrentPage(currentPage + 1)} disabled={currentPage === totalPages}>
            –í–ø–µ—Ä—ë–¥
          </button>
        </div>
      )}
    </div>
  );
};

export default PartsPage;
